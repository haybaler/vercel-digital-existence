// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  researchSessions ResearchSession[]
  generatedContent GeneratedContent[]
  trendMonitors    TrendMonitor[]
  notifications    Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Research System
model ResearchSession {
  id        String            @id @default(cuid())
  userId    String
  query     String
  results   Json?
  status    ResearchStatus    @default(PENDING)
  metadata  Json?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

enum ResearchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Content Generation
model GeneratedContent {
  id        String      @id @default(cuid())
  userId    String
  type      ContentType
  title     String
  content   String      @db.Text
  metadata  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

enum ContentType {
  BLOG
  SOCIAL
  NEWSLETTER
  SEO
  REPORT
}

// Trend Monitoring
model TrendMonitor {
  id        String        @id @default(cuid())
  userId    String
  name      String
  sources   Json          // Array of trend sources
  keywords  String[]
  status    MonitorStatus @default(ACTIVE)
  lastRun   DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  alerts TrendAlert[]

  @@index([userId])
  @@index([status])
}

enum MonitorStatus {
  ACTIVE
  PAUSED
  STOPPED
}

model TrendAlert {
  id          String       @id @default(cuid())
  monitorId   String
  title       String
  description String       @db.Text
  severity    AlertSeverity
  url         String?
  metadata    Json?
  read        Boolean      @default(false)
  createdAt   DateTime     @default(now())

  monitor TrendMonitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId])
  @@index([severity])
  @@index([read])
  @@index([createdAt])
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Notifications
model Notification {
  id        String             @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String             @db.Text
  metadata  Json?
  read      Boolean            @default(false)
  createdAt DateTime           @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

enum NotificationType {
  RESEARCH_COMPLETED
  CONTENT_GENERATED
  TREND_DETECTED
  SYSTEM_ALERT
  WELCOME
}

// API Usage Tracking
model ApiUsage {
  id        String   @id @default(cuid())
  userId    String?
  provider  String   // openai, anthropic, etc.
  model     String   // gpt-4, claude-3, etc.
  tokens    Int
  cost      Float?
  operation String   // research, content, trend
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([provider])
  @@index([createdAt])
}